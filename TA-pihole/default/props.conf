[pihole]
EXTRACT-msg = \] (?P<msg>.*)
EXTRACT-forward_dest = forward destinations: (?P<forward_dest>\d+)
EXTRACT-clients = clients: (?P<clients>\d+)
EXTRACT-domains = domains: (?P<domains>\d+)
EXTRACT-queries_unknown = Unknown DNS queries: (?P<queries_unknown>\d+)
EXTRACT-queries_wildcard_blocked = Wildcard blocked DNS queries: (?P<queries_wildcard_blocked>\d+)
EXTRACT-queries_exactly_blocked = Exactly blocked DNS queries: (?P<queries_exactly_blocked>\d+)
EXTRACT-queries_forwarded = Forwarded DNS queries: (?P<queries_forwarded>\d+)
EXTRACT-queries_cached = Cached DNS queries: (?P<queries_cached>\d+)
EXTRACT-queries_total = Total DNS queries: (?P<queries_total>\d+)
EXTRACT-blocklist_count = Gravity list entries: (?P<blocklist_count>\d+)

[dnscrypt]
EXTRACT-GET-process,pid = \s(?P<process>[^\s\\:[]+)(?:\[(?P<pid>\d+)\])?:\s.*
EXTRACT-GET-msg = ^[^\]\n]*\]:\s+(?P<msg>[^\n\r]+)
EXTRACT-GET-msg_f0,msg_f1 = ^[^\]\n]*\]:\s+(?P<msg_f0>[^\:]+)\:\s(?P<msg_f1>[^\n\r]*)
EXTRACT-GET-msg_f2,msg_f3,msg_f4 = ^[^\]\n]*\]:\s+(?P<msg_f2>\S+)(\:\s|\s)(?P<msg_f3>[^\:]+): (?P<msg_f4>.*)$

EXTRACT-src,dest = ^[^\]\n]*\]:\s+\w+\s+\w+\s+(?P<src>[^:]+):\d+\s+\w+\s+(?P<dest>[^:]+)
EXTRACT-src_port,dest_port = ^(?:[^:\n]*:){6}(?P<src_port>\d+)[^:\n]*:(?P<dest_port>.+)

[dnscrypt:proxy]
EXTRACT-src_ip,name,record_type,vendor_action = \]\s+(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+(?P<name>\S+\.\S+)\s+(?P<record_type>\w+)\s+(?P<vendor_action>\S+)
EVAL-vendor_product = "dnscrypt proxy"

##DNS Caching Proxy
[dnsmasq]
TZ=US/Eastern

EXTRACT-GET-process,pid = \s(?P<process>[^\s\\:[]+)(?:\[(?P<pid>\d+)\])?:\s.*
EXTRACT-GET-msg = ^[^\]\n]*\]:\s+(?P<msg>[^\n\r]+)
EXTRACT-GET-msg_f0,msg_f1 = ^[^\]\n]*\]:\s+(?P<msg_f0>[^\:]+)\:\s(?P<msg_f1>[^\n\r]*)
EXTRACT-GET-msg_f2,msg_f3,msg_f4 = ^[^\]\n]*\]:\s+(?P<msg_f2>\S+)(\:\s|\s)(?P<msg_f3>[^\:]+): (?P<msg_f4>.*)$

EVAL-src=coalesce(src,src_ip)
EVAL-response_action = case(evtACT=="reply" or evtACT=="cached", "answered", evtACT LIKE "%list", "blocked")
EVAL-local_hosts = if(evtACT LIKE "%hosts","true","false")
EVAL-blocked_query = case(((evtACT=="config" AND answer=="0.0.0.0") OR evtACT LIKE "%list" OR response_acion=="blocked"),"true")
EVAL-cached_response = case((evtACT=="cached" OR evtACT LIKE "%hosts" OR evtACT=="config"),"true", (evtACT=="reply"),"false")
EVAL-dns_host_ip = case(isnull(dns_host_ip), if(evtACT=="query" OR evtACT=="forwarded",dest_ip,host))
EVAL-dest_port = case(isnull(dest_port),"53")
EVAL-transport = case(isnull(dest_port),"tcp")
EVAL-reply_code = if( isnull(reply_code1) AND message_type=="Response", case(answer=="NXDOMAIN", "NXDomain", answer like "%NODATA%", "NoData", evtACT like "%refused%", "Refused", cached_response=="true" OR evtACT="reply", "NoError"), reply_code)
EVAL-message_type = case((evtACT=="query" OR evtAC=="forwarded"),"Query",(evtACT=="cached" OR evtACT=="reply" OR evtACT=="config" OR evtACT LIKE "%hosts" OR evtACT LIKE "%list"),"Response")

EVAL-name = coalesce(query,dest)
EVAL-vendor_product = "dnsmasq"
##Need to complete this
#EVAL-dest_ip=case()
#EVAL-src_ip=case()

FIELDALIAS-client = src AS client

EXTRACT-status,version = dnsmasq\[\d+\]\: (?<status>\S+)\, version (?P<version>\S+)
EXTRACT-dns_host,evtACT = \]: nameserver (?P<dns_host>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (?P<evtACT>.+)
EXTRACT-transaction_id,src_ip,src_port = \]: (?P<transaction_id>\d+) (?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(?P<src_port>\d+)

##query-local resolution request
EXTRACT-evtACT,query_type,query,src_ip = \s+(?P<evtACT>query)[\s|\[](?P<query_type>\w+)]\s(?P<query>\S+)\s\S+\s(?P<src_ip>\S+)

##query-external relay resolution
EXTRACT-evtACT,name,dest_ip =\s+(?P<evtACT>forwarded)\s+(?P<name>.+)\sto\s(?P<dest_ip>\S+)

##response-locl resolution
EXTRACT-evtACT,dest,answer = \s+(?P<evtACT>\/\S+|config|cached)\s+(?P<dest>.+)\sis\s(?P<answer>\S+)
EXTRACT-reply_code = \s+(?=\/\S+|config|cached).+?is\s(?P<reply_code>[A-Z]+)

##response-external resolution
EXTRACT-evtACT1,dest1,answer1 = \s+(?P<evtACT>reply)\s+(?P<dest>.+)\sis\s(?P<answer>.+)

#Query warning/error
EXTRACT-message,dest=\s\S+\[\d+\]\: (?P<message>.+?)\: (?P<dest>[\S+\.]+)

##DHCP/DNS Server
[dnsmasq-dhcp]
EVAL-action = case((flag=="DHCPNAK" OR assignName =="not giving name" OR flag=="not giving name"), "blocked", flag == "DHCPACK", "added")
EVAL-vendor_product = "dnsmasq"
## need to set lease scope to proper range format
#EVAL-lease_scope =
EVAL-lease_duration = if(lease_scope_days == "1d", "86400", lease_duration)
EVAL-src_dns = if(isnull(src_dns),src_nt_host,src_dns)

## DHCPDISCOVER (without src_ip)
EXTRACT-flag,interface,src_mac = ^[^\]\n]*\]:\s+(?P<flag>DHCPDISCOVER)\((?P<interface>\S+)\)\s(?P<src_mac>[0-9a-fA-F:]+)\s
## DHCPDISCOVER (with src_ip), DHCPINFORM, DHCPOFFER, and DHCPREQUEST
EXTRACT-flag,interface,src_ip,src_mac = ^[^\]\n]*\]:\s+(?P<flag>DHCPINFORM|DHCPOFFER|DHCPREQUEST|DHCPDISCOVER)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s

## DHCPACK
EXTRACT-flag,interface,src_ip,src_mac,src_nt_host = ^[^\]\n]*\]:\s+(?P<flag>DHCPACK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?<src_nt_host>\S+)
EXTRACT-flag,interface,src_ip,src_mac = ^[^\]\n]*\]:\s+(?P<flag>DHCPACK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)

## DHCPNAK
EXTRACT-flag,interface,src_ip,src_mac,message = ^[^\]\n]*\]:\s+(?P<flag>DHCPNAK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?P<message>.+)$
EXTRACT-flag,src_nt_host,src_ip,vendor_reason = ^[^\]\n]*\]:\s+(?P<flag>not giving name) (?P<src_nt_host>\S+)[\w+\s]+\s(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (?P<vendor_reason>.+)

## Ignore Domain Messages
EXTRACT-message,src_nt_host = ^[^\]\n]*\]:\s+(?P<message>Ignoring domain (?=(?P<src_nt_domain>\S+)\s)\S+ for DHCP host name)

## Read local host file
EXTRACT-message,hosts_file = ^[^\]\n]*\]:\s+(?P<flag>read) (?P<hosts_file>\/.+hosts)

## DHCPDECLINE
## DHCPRELEASE
EXTRACT-flag,interface,src_ip,src_mac = ^[^\]\n]*\]:\s+(?P<flag>DHCPRELEASE)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s$
EXTRACT-flag,interface,src_ip,src_mac,vendor_reason = ^[^\]\n]*\]:\s+(?P<flag>DHCPRELEASE)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?P<vendor_reason>.+)
## DHCPINFORM

#EXTRACT-src_ip,src_mac = ^[^\]\n]*\]:\s+\S+\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s
#EXTRACT-flag,interface = ^[^\]\n]*\]:\s+(?P<flag>\S+)\((?P<interface>\S+\))\s
EXTRACT-lease_scope,lease_scope_days = ^[^,\n]*,\s+\w+\s+\w+\s+(?P<lease_scope>[^,]+), lease time (?P<lease_scope_days>\S+)
#EXTRACT-src_nt_host = DHCPACK.+([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}\s+(?P<src_nt_host>.+)
#EXTRACT-assignName,src_name = ^[^\]\n]*\]:\s+(?P<assignName>\w+\s+\w+\s+\w+)\s+(?P<src_name>\w+)i
#EXTRACT-src_mac = ^[^\]\n]*\]:\s+\S+\s(?P<src_mac>[0-9a-fA-F:]+)\s
#EXTRACT-src_ip = ^(\w+\s+)+(\d+\s+)+\d+:\d+:(\d+\s+)+\d+\.\d+\.\d+\.(\d+\s+)+(\w+\s+)+(\d+\s+)+\d+:\d+:(\d+\s+)+\w+\-\w+\[\d+\]:\s+(\w+\s+)+(?P<src_ip>[^ ]+)
FIELDALIAS-dnsmasq-dhcp-hostname = src_nt_host AS hostname
FIELDALIAS-dnsdhcp-signature = flag AS signature

[*.toml]
SHOULD_LINEMERGE=false
