##Base Sourcetype please use tomato as incoming sourcetype on your router logs
# App will set tomato:<subtype>
[tomato]
TRANSFORMS-ZZZ-0 = set_syslog_adblock,set_syslog_netfilter, set_syslog_process,set_syslog_vpnrouting
REPORT-ZZZ-0 = syslog_extractions,syslog_extractions1,syslog_extractions2,syslog_extractions3, syslog_kv_extractions

##The following extracts apply to the remaining device syslog messages
EXTRACT-service,service_status = \s\:\s(?P<service>\S+)\s\:\s\w+\s\w+\s(?<service_status>.+)
EXTRACT-component,message =  kernel: (?P<component>\S+[^:]) (?P<message>.+)
EXTRACT-device,vendor_action = kernel:: device (?P<device>\S+) (?P<vendor_action>.+)
EXTRACT-port_num,port_name,vendor_action =   kernel: \S+ port (?P<port_num>\d+)\((?P<port_name>\S+)\) (?P<vendor_action>.+)
EXTRACT-signature,dest_ip = \s\:\s(?P<signature>.+)\.\sIP\: (?P<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})

##Apply to all sub sourcetypes
[(?::){0}tomato:*]
##Make extract-component,message a REPORT/TRANSFORM
REPORT-ZZZ-0 = syslog_extractions,syslog_extractions1,syslog_extractions2,syslog_extractions3, syslog_kv_extractions

EXTRACT-GET-msg = ^[^\]\n]*\]:\s+(?P<msg>[^\n\r]+)
EXTRACT-GET-msg_f0,msg_f1 = ^[^\]\n]*\]:\s+(?P<msg_f0>[^\:]+)\:\s(?P<msg_f1>[^\n\r]*)
EXTRACT-GET-msg_f2,msg_f3,msg_f4 = ^[^\]\n]*\]:\s+(?P<msg_f2>\S+)(\:\s|\s)(?P<msg_f3>[^\:]+): (?P<msg_f4>.*)$

EVAL-service = if(isnull(service),process,service)

#IP/DNS Blocklists
[tomato:adblock]
EXTRACT-blacklist_num,adblock_action,blacklist_url = adblock: \[(?<blacklist_num>\d+)\] (?P<adblock_action>downloading blacklist) - (?P<blacklist_url>\S+)
EXTRACT-blacklist_num,adblock_action,blacklist_count = adblock: \.\.\. \[(?<blacklist_num>\d+)\] (?P<adblock_action>found) (?<blacklist_count>\d+)
EXTRACT-adblock_action = adblock: (?P<adblock_action>.+) \.\.\.
EXTRACT-adblock_action,blacklist_count_sum = adblock: (?P<adblock_action>activated) - (?<blacklist_count_sum>\d+)

##APC UPS Daemon
[tomato:apcupsd]

## crond, the job scheduler
[tomato:cron]

[tomato:crond]
EVAL-action = case(isnotnull(time_skew),"success")
EVAL-ntp_updated = case(isnotnull(time_skew),"1")
EVAL-ntp_action = case(isnotnull(time_skew),"time disparity detected")
EXTRACT-msg = crond\[\d+\]\: (?<message>.+)
EXTRACT-cron_usr,cron_pid,cron_cmd = \[\d+\]\: USER (?P<cron_usr>\S+) pid (?P<cron_pid>\d+) cmd(?P<cron_cmd>.+$)
EXTRACT-process_name,status = crond\[\d+\]\: (?P<process_name>.+) (?P<status>critical|started|stopped|warning|starting)
EXTRACT-log_level = crond\[\d+\]\:.+\, log level (?P<log_level>\d+)
EXTRACT-user,src_pid,cmd = crond\[\d+\]\: USER (?P<user>\S+) pid (?P<src_pid>\d+) cmd (?P<cmd>.+)
EXTRACT-time_skew,time_skew_unit = crond\[\d+\]\: time disparity of (?P<time_skew>\d+) (?P<time_skew_units>\S+)

[tomato:dhcp-event]
EXTRACT-component,message = \s([^\s\\:[]+)(?:\[(\d+)\])?:\s(?P<component>\S+): (?P<message>.+)

##SSH Server
[tomato:dropbear]
FIELDALIAS-src = src_ip AS src
FIELDALIAS-dest_ip = host AS dest_ip
FIELDALIAS-dest = host AS dest
EXTRACT-signature,src_ip,src_port = \]:\s(?P<signature>[\w\s]+)\s.+\s(?P<src_ip>\d+.\d+.\d+.\d+):(?P<src_port>\d+)
EXTRACT-dropbear_action,user,signature = \]:\s(?P<dropbear_action>Exit)\s\((?P<user>\w+)\):\s(?P<signature>.+)
#EXTRACT-dest_ip = ^(?:[^ \n]* ){3}(?P<dest_ip>[^ ]+)
EXTRACT-dropbear_action,signature = \]:\s(?P<dropbear_action>[\w\s]+):\s+(?P<signature>.+)
EXTRACT-user0 = for\s(?P<user>.+?)\sfrom
EXTRACT-user1 = dropbear\[\w+\]\:.+user \'(?<user>.+)\'
##This looks sloppy, redo the reply_code and action evals
EVAL-reply_code = if(signature="Password auth succeeded for", "Password auth succeeded", if(signature="Bad password attempt for", "Bad password attempt", signature))
EVAL-action = case(signature == "Password auth succeeded for", "success", signature == "Bad Password attempt for" OR signature LIKE "Max auth tries%" OR signature == "Login attempt for nonexistent user", "failure")
EVAL-app = dropbear

[tomato:dnscrypt]
EXTRACT-src,dest = ^[^\]\n]*\]:\s+\w+\s+\w+\s+(?P<src>[^:]+):\d+\s+\w+\s+(?P<dest>[^:]+)
EXTRACT-src_port,dest_port = ^(?:[^:\n]*:){6}(?P<src_port>\d+)[^:\n]*:(?P<dest_port>.+)

[tomato:dnscrypt:proxy]
EXTRACT-src_ip,name,record_type,vendor_action = \]\s+(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+(?P<name>\S+\.\S+)\s+(?P<record_type>\w+)\s+(?P<vendor_action>\S+)
EVAL-vendor_product = "dnscrypt proxy"

##DNS Caching Proxy
[tomato:dnsmasq]
EXTRACT-record_type = \s\S+\[(?P<record_type>\w+)\]\s

EVAL-src=coalesce(src,src_ip)
EVAL-response_action = case(evtACT=="reply" or evtACT=="cached", "answered", evtACT LIKE "%list" OR answer=="0.0.0.0", "blocked")
EVAL-local_hosts = if(evtACT LIKE "%hosts","true","false")
EVAL-blocked_query = case(((evtACT=="config" AND answer=="0.0.0.0") OR evtACT LIKE "%list" OR response_acion=="blocked"),"true")
EVAL-cached_response = case((evtACT=="cached" OR evtACT LIKE "%hosts" OR evtACT=="config"),"true", (evtACT=="reply"),"false")
EVAL-dns_host_ip = case(isnull(dns_host_ip), if(evtACT=="query" OR evtACT=="forwarded",dest_ip,host))
EVAL-dest_port = case(isnull(dest_port),"53")
EVAL-transport = case(isnull(dest_port),"tcp")
EVAL-reply_code = if( isnull(reply_code) AND message_type=="Response", case(answer=="NXDOMAIN", "NXDomain", answer like "%NODATA%", "NoData", evtACT like "%refused%", "Refused", cached_response=="true" OR evtACT="reply" OR evtACT="cached" OR evtACT="config" OR evtACT LIKE "%list%", "NoError"), reply_code) 
EVAL-message_type = case((evtACT=="query" OR evtAC=="forwarded"),"Query",(evtACT=="cached" OR evtACT=="reply" OR evtACT=="config" OR evtACT LIKE "%hosts" OR evtACT LIKE "%list"),"Response")

EVAL-name = coalesce(query,dest)
EVAL-vendor_product = "dnsmasq"
##Need to complete this
#EVAL-dest_ip=case()
#EVAL-src_ip=case()

FIELDALIAS-client = src AS client

EXTRACT-status,version = dnsmasq\[\d+\]\: (?<status>\S+)\, version (?P<version>\S+)
EXTRACT-dns_host,evtACT = \]: nameserver (?P<dns_host>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (?P<evtACT>.+)
EXTRACT-transaction_id,src_ip,src_port = \]: (?P<transaction_id>\d+) (?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/(?P<src_port>\d+)

##query-local resolution request
EXTRACT-evtACT,query_type,query,src_ip = \s+(?P<evtACT>query)[\s|\[](?P<query_type>\w+)]\s(?P<query>\S+)\s\S+\s(?P<src_ip>\S+)

##query-external relay resolution
EXTRACT-evtACT,name,dest_ip =\s+(?P<evtACT>forwarded)\s+(?P<name>.+)\sto\s(?P<dest_ip>\S+)

##response-locl resolution
EXTRACT-evtACT,dest,answer = \s+(?P<evtACT>\/\S+|config|cached)\s+(?P<dest>.+)\sis\s(?P<answer>\S+)
EXTRACT-reply_code = \s+(?=\/\S+|config|cached).+?is\s(?P<reply_code>[A-Z]+)

##response-external resolution
EXTRACT-evtACT1,dest1,answer1 = \s+(?P<evtACT>reply)\s+(?P<dest>.+)\sis\s(?P<answer>.+)

#Query warning/error
EXTRACT-message,dest=\s\S+\[\d+\]\: (?P<message>.+?)\: (?P<dest>[\S+\.]+)

##DHCP/DNS Server
[tomato:dnsmasq-dhcp]
EVAL-action = case((flag=="DHCPNAK" OR assignName =="not giving name" OR flag=="not giving name"), "blocked", flag == "DHCPACK", "added")
EVAL-vendor_product = "dnsmasq"
## need to set lease scope to proper range format
#EVAL-lease_scope =
EVAL-lease_duration = if(lease_scope_days == "1d", "86400", lease_duration)
EVAL-src_dns = if(isnull(src_dns),src_nt_host,src_dns)

## DHCPDISCOVER (without src_ip)
EXTRACT-DHCPDISCOVER0 = [^\]\n]*\]:\s+(?P<flag>DHCPDISCOVER)\((?P<interface>\S+)\)\s(?P<src_mac>[0-9a-fA-F:]+)\s
## DHCPDISCOVER (with src_ip), DHCPINFORM, DHCPOFFER, and DHCPREQUEST
EXTRACT-DHCPDISCOVER1 = [^\]\n]*\]:\s+(?P<flag>DHCPINFORM|DHCPOFFER|DHCPREQUEST|DHCPDISCOVER)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)

## DHCPACK
EXTRACT-DHCPACK0 = [^\]\n]*\]:\s+(?P<flag>DHCPACK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?<src_nt_host>\S+)
EXTRACT-DHCPACK1 = [^\]\n]*\]:\s+(?P<flag>DHCPACK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)

## DHCPNAK
EXTRACT-DHCPNAK0 = [^\]\n]*\]:\s+(?P<flag>DHCPNAK)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?P<message>.+)
EXTRACT-DHCPNAK1 = [^\]\n]*\]:\s+(?P<flag>not giving name) (?P<src_nt_host>\S+)[\w+\s]+\s(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (?P<vendor_reason>.+)

## Ignore Domain Messages
EXTRACT-IGNORE_DOMAIN = [^\]\n]*\]:\s+(?P<message>Ignoring domain (?=(?P<src_nt_domain>\S+)\s)\S+ for DHCP host name)

## Read local host file
EXTRACT-READ_LOCAL = [^\]\n]*\]:\s+(?P<flag>read) (?P<hosts_file>\/.+hosts)

## DHCPDECLINE
## DHCPRELEASE
EXTRACT-DHCPRELEASE0 = [^\]\n]*\]:\s+(?P<flag>DHCPRELEASE)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)
EXTRACT-DHCPRELEASE1 = [^\]\n]*\]:\s+(?P<flag>DHCPRELEASE)\((?P<interface>\S+)\)\s(?P<src_ip>[\d{1,3}\.]+)\s(?P<src_mac>[0-9a-fA-F:]+)\s(?P<vendor_reason>.+)
## DHCPINFORM


EXTRACT-LEASE_INFO = [^,\n]*,\s+\w+\s+\w+\s+(?P<lease_scope>[^,]+), lease time (?P<lease_scope_days>\S+)
FIELDALIAS-dnsmasq-dhcp-hostname = src_nt_host AS hostname
FIELDALIAS-dnsdhcp-signature = flag AS signature


##USB
[tomato:hotplug]
EVAL-hotplug_msg,usb_version,interface,dvc_id = ^.+hotplug\S+\s(?P<hotplug_msg>\w+\s+\w+\s+\w+)\s+(?P<usb_version>[^ ]+)\s+\[INTERFACE=(?P<interface>.+)\s+PRODUCT=(?P<dvc_id>.+)\]

## httpd
[tomato:httpd]
EVAL-action = case(http_msg LIKE "Auth%fail","failure",lower(vendor_status) LIKE "%started$%","started")
EVAL-app = "http/https"
EVAL-user = case(isnull(user),"unknown")
EVAL-vendor_product = "httpd"
EXTRACT-site,vendor_status = httpd\[\d+\]\: (?P<site>\S+) \S+ (?P<vendor_status>.+)
EXTRACT-http_msg = ^[^\]\n]*\]:\s+(?P<http_msg>.+)
EXTRACT-status,status_msg = Error Code (?<status>\d+)\: (?<status_msg>.+)
EXTRACT-dest_port = started.+port (?P<dest_port>\d+)

##IGMP
[tomato:igmpproxy]
EVAL-app="igmpproxy"
EVAL-unrouteable = case(dest_translated_ip LIKE "169.254.%", "true")
EXTRACT-dest_ip,orig_translated_ip,dest_translated_ip = route (?P<dest_ip>\S+) changed from (?P<orig_translated_ip>\S+) to (?P<dest_translated_ip>\S+)

##Telnet
[tomato:login]
EXTRACT-user,signature,interface = ^[^\]\n]*\]:\s+(?P<user>\w+)\s+(?P<signature>\w+) on '(?P<interface>[^']+)
EXTRACT-signature,user,interface = ^[^\]\n]*\]:\s+(?P<signature>\w+ \w+) for \'(?<user>\w+)\' on \'(?P<interface>[^']+)
EVAL-app = if(process=="login", "telnet", app)
EVAL-action = case(signature=="login","success",lower(signature) LIKE "%invalid%","failure")

##IP Tables Firewall
[tomato:netfilter]
EVAL-bytes = bytes=coalesce(bytes_in+bytes-out,bytes_in,bytes_out)
EVAL-bytes_out = case('IN'=="br0" AND 'OUT'=="vlan2",LEN)
EVAL-bytes_in = case('IN'=="vlan2",LEN)
EVAL-modem_mac = case('IN'="vlan2",MACSRC)
EVAL-wan_mac = case(MACDST!="ff:ff:ff:ff:ff:ff",MACDST)
EVAL-process = if(isNull(process), "netfilter", process)
##may need to play with direction eval more
EVAL-direction = if(out=="vlan2","outbound","inbound")
EVAL-vendor_product = "Linux Netfilter"
EVAL-protocol = "ip"

EXTRACT-tcp_flag = RES=[\w\d]+[\s\w]+(?P<tcp_flag>SYN|FIN|RST|URG|PSH)\sURGP
EXTRACT-opt = OPT \((?P<opt>\S+)\)

FIELDALIAS-netfilter_clientip = SRC AS clientip
FIELDALIAS-netfilter_dest = DST AS dest
FIELDALIAS-netfilter-dst = DST AS dst
FIELDALIAS-netfilter_dest_ip = DST AS dest_ip
FIELDALIAS-netfilter_dest_mac = MACDST AS dest_mac
FIELDALIAS-netfilter_dvc_ip = host AS dvc_ip
FIELDALIAS-netfilter_dest_interface = OUT AS dest_interface
FIELDALIAS-netfilter_dest_port = DPT AS dest_port
FIELDALIAS-netfilter_dvc = host AS dvc
FIELDALIAS-netfilter_dvc_host = host AS dvc_host
FIELDALIAS-netfilter_in = IN AS in
FIELDALIAS-netfilter_out = OUT AS out
FIELDALIAS-netfilter_src = SRC AS src
FIELDALIAS-netfilter_src_ip = SRC AS src_ip
FIELDALIAS-netfilter_src_port = SPT AS src_port
FIELDALIAS-netfilter_src_interface = IN AS src_interface
FIELDALIAS-netfilter_src_mac = MACSRC  AS src_mac
FIELDALIAS-netfilter_tos = TOS AS tos
FIELDALIAS-netfilter_ttl = TTL AS ttl
LOOKUP-icmp_codes = icmp_codes TYPE AS TYPE CODE AS CODE OUTPUT TYPE AS icmp_type, icmp_code AS icmp_code, CODE AS icmp_type_code, icmp_code_description AS icmp_code_description
LOOKUP-netfilter_action = netfilter_action event_action AS FLAGS OUTPUT cim_action AS action
LOOKUP-netfilter_transport = netfilter_transport PROTO OUTPUT transport
REPORT-netfilter_flags = netfilter_flags
REPORT-netfilter_mac = netfilter_mac
REPORT-netfilter_tcp_flag = netfilter_tcp_flag
#TZ=UTC

##NTP Client (tomato)
##OS/Time CIM
[tomato:ntpc]
EXTRACT-ntp_time,ntp_action = ^.+Time:\s(?P<ntp_time>.+),\s+(?P<ntp_action>.+)
EXTRACT-ntp_action,ntp_time,ntp_updated = ^.+Time\s(?P<ntp_action>\w+):\s+(?P<ntp_time>.+)\s+\[(?P<ntp_updated>[^\]]+)
EXTRACT-sync_time = ^[^\]\n]*\]:\s+Time: (?P<weekday>\S+), (?P<day>\d+) (?P<month>\S+) (?P<year>\d+) (?P<hour>\S+):(?P<min>\S+):(?P<sec>\S+) (?P<tz_offset>\S+)
EVAL-action = case(ntp_action == "Updated", "success", ntp_action == "no change was needed.", "success")

##NTP Client (dd-wrt)
##OS/Time CIM
##Can probably merge with ntpc later
[tomato:ntpclient]
EVAL-vendor_product="ntpclient"
FIELDALIAS-ntp_ip = dest_ip AS ntp_ip
FIELDALIAS-ntp_dns = dest_dns AS ntp_dns
EVAL-action = case(ntp_action=="Time set","success",ntp_action=="Failed" OR ntp_action=="Timed out","failure")
EXTRACT-ntp_msg0,ntp_msg_v0 = ntpclient\[\d+\]\: (?P<ntp_msg>(Fail[\w+\s]+(\s|\:)))(--verbose\: | )(?P<ntp_msg_v>.+)
EXTRACT-ntp_msg1 = ntpclient\[\d+\]\: (?<ntp_msg>Connecting.+|Time.+)
EXTRACT-ntp_action = ntpclient\[\d+\]\: (?<ntp_action>Connecting|Time set|Failed|Timed out)
EXTRACT-src_dns,src_ip = ntpclient\[\d+\]\:.+ from (?P<src_dns>[\w+\.]+) \[(?P<src_ip>[\d{1,3}\.]+)\]
EXTRACT-dest_dns,dest_ip = ntpclient\[\d+\]\:.+(to|for) (?P<dest_dns>[\w+\.]+) \[(?P<dest_ip>[\d{1,3}\.]+)\]

[tomato:nvram:show]
BREAK_ONLY_BEFORE=\S+ nvram:config\[
EXTRACT-dnsmasq_option = dnsmasq_options=(\S+.+?)\S\s\|
EXTRACT-sshd_rsa_host_key = sshd_rsa_host_key\=([\S\s\|]+)\s\|\s
REPORT-nvram_fields = grab_nvram_fields


##OpenVPN Client
[tomato:openvpn]
##Server objects
EXTRACT-config_inconsistent,config_setting_local,config_setting_remote = \: \'(?P<config_inconsistent>[^\']+)\' is used inconsistently, local='(?P<config_setting_local>[^\']+)\', remote=\'(?P<config_setting_remote>[^\']+)\'

##Client objects
EVAL-action = case(temp_action == "Closing TUN/TAP interface", "end", temp_action == "Initialization Sequence Completed", "start")
EXTRACT-temp_action = \]:\s+(?P<temp_action>.+)
EXTRACT-vpn_interface,vpn_ip,vpn_netmask,vpn_mtu,vpn_broadcast = ifconfig\s(?P<vpn_interface>.+?)\s+(?P<vpn_ip>[^ ]+)\s+\w+\s+(?P<vpn_netmask>[^ ]+)\s+\w+\s+(?P<vpn_mtu>\d+) broadcast (?P<vpn_broadcast>.+)
EXTRACT-vpn_msg,vpn_msg_detail = ^[^\]\n]*\]:\s+(?P<vpn_msg>[^:]+):\s+(?P<vpn_msg_detail>.+)
EXTRACT-vpn_host_dns,vpn_host_ip,vpn_host_port = ^[^\]\n]*\]:\s+\[(?P<vpn_host_dns>[^\]]+)(?:[^\]\n]*\]){2}(?P<vpn_host_ip>[^:]+):(?P<vpn_host_port>.+)
FIELDALIAS-ssl_subject_common_name = CN AS ssl_subject_common_name
FIELDALIAS-ssl_subject_locality = L AS subject_locality
FIELDALIAS-ssl_ssl_subject_email = emailAddress AS ssl_subject_email
FIELDALIAS-ssl_subject_organization = O AS ssl_subject_organization
FIELDALIAS-ssl_subject_unit = OU AS ssl_subject_unit
FIELDALIAS-ssl_subject_state = ST AS ssl_subject_state
FIELDALIAS-ssl_name = name AS ssl_name

## System information on boot
[tomato:preinit]
EVAL-firmware_version = case(message LIKE ("%Tomato%") OR message LIKE "%wrt%",message)
EVAL-firmware_model = case(message LIKE ("%Tomato%") OR message LIKE "%wrt$",component)

EXTRACT-component,message = \S+\[\d+\]\: (?P<component>.+)\: (?<message>.+)$
EXTRACT-static_route = Static route, (?P<static_route>.+)$
EXTRACT-status,service = \[\d+\]\: (?P<status>start\w+|stop\w+) (?P<service>\w+)
EXTRACT-wan_ports,wan_ports_max = \[\d+\]\: MultiWAN: MWAN is (?P<wan_ports>\d+) \(max (?P<wan_ports_max>\d+)\)

[tomato:process_monitor]

##RAW Printer Port Share Daemon
[tomato:p9100d]
EXTRACT-src_ip,src_port,p9100d_action = .+p9100d\[\d+\]:\s(.+):(?P<src_ip>[\d.:]+)\sport\s(?P<src_port>\d+)\s(?P<p9100d_action>\w+)
EXTRACT-p9100d_status,p9100d_msg = .+p9100d\[\d+\]:\s(?P<p9100d_status>.+):(?P<p9100d_msg>.+)
EXTRACT-print_size = .+p9100d\[\d+\]:\s(.+):\s(?P<print_size>\d+\/\d+\s\w+)

##
[tomato:rcheck]
EXTRACT-message = \s([^\s\\:[]+)(?:\[(\d+)\])?:\s(?P<message>.+)

##TOR client
[tomato:Tor]
EXTRACT-tor_btstrp,tor_btstrp_msg = Bootstrapped\s(?P<tor_btstrp>\d+%):\s(?P<tor_btstrp_msg>.+)
EXTRACT-tor_msg = Tor\[\d+\]:\s(?P<tor_msg>.+)
EXTRACT-tor_uptime,tor_uptime_units,tor_circuits_open,tor_sent,tor_received = uptime\sis\s(?P<tor_uptime>\d+:\d+)\s(?P<tor_uptime_units>\w+),\s\w+\s(?P<tor_circuits_open>\d+)[\s\w].+?sent\s(?P<tor_sent>\d+\s\w+)[\s\w]+?(?P<tor_received>[\d.]+\s\w+)
EXTRACT-service,tor_uptime = Heartbeat:\s(?P<service>\w+).+is\s(?P<tor_uptime>[^,]+)

##DHCP Client (WAN)
[tomato:udhcpc]
#EVAL-action = if(eventtype=="udhcpc_lease_obtained", "added", dhcp_action)
##Need to update and make a new EVAL-action with current dhcp_action
EVAL-wan_mac = case(direction=="inbound" AND isnotnull(wan_ip),MACSRC)
EXTRACT-dest_ip = \[\d+\]\: .+(of|for) (?P<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
EXTRACT-wan_ip = \[\d+\]\:.+lease of (?P<wan_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) obtained
EXTRACT-dhcp_action = \[\d+\].+(?P<dhcp_action>sending \w+|lease of \S+ obtained|lease lost)
EXTRACT-lease_duration = \[\d+\]\: .+lease time (?P<lease_duration>\d+)
EXTRACT-message = \[\d+\]\: (lease of \S+ obtained|sending select|lease lost)(\, |\s)(?P<message>.+)

##VSFTP Server
[tomato:vsftpd]
EXTRACT-vsftp_user,vsftp_login_status,src_ip = ^[^\]\n]*\]:\s+\[(?P<vsftp_user>\w+)\]\s+(?P<vsftp_login_status>[^:]+)[^"\n]*"(?P<src_ip>[^"]+)
EXTRACT-vsftp_login_msg = ^[^,\n]*,\s+(?P<vsftp_login_msg>.+)
EVAL-action = action=case(vsftp_login_status == "OK LOGIN", "success", vsftp_login_status == "FAIL LOGIN", "failure")
EVAL-app = "ftp"
EVAL-vendor_product = "vsftp"

