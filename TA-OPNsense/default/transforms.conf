### Lookups ###
[opnsense_filter_action]
filename = opnsense_filter_action.csv

[opnsense_filter_tcpflags]
filename = opnsense_filter_tcpflags.csv

[opnsense_filter_transport]
filename = opnsense_filter_transport.csv

[opnsense_openvpn_action]
filename = opnsense_openvpn_action.csv

## Postfix Items ##
[postfix_consts]
# Constant fields applied uniformly to ALL events
# Note:  More efficient than using an 'EVAL-*' for these fields.
filename = opnsense_postfix_consts.csv

[postfix_actions]
# Convert Postfix's 'status' messages into CIM 'actions' (as best as possible)
filename = opnsense_postfix_actions.csv
## End Postfix ##

### End Lookups ###

## Index Time Transforms - Requires TA installed on Indexer/HF ##
#Primary sourcetyper
[opnsense_sourcetyper]
##Most services
REGEX = (?:(?:\s|\/)(kernel(?!.*filterlog)|dhcpd|opnsense|unbound|apinger|dhclient|devd|syslogd|openvpn|suricata|sshd|pkg|cron|lighttpd|monit)(?:\[\d+\])*\:)
DEST_KEY = MetaData:Sourcetype
FORMAT = sourcetype::opnsense:$1

#Backup sourcetyper
[opnsense_sourcetyper1]
##Things like configd.py, flowd_aggregate.py
REGEX = \s.*(?:\s|\/)([^\.]+)(?:\.)\w+(?:\[\d+\])*\:
DEST_KEY = MetaData:Sourcetype
FORMAT = sourcetype::opnsense:$1

#Postfix sourcetyper (consider move to TA-Sendmail/Postfix)
[opnsense_postfix_sourcetyper]
REGEX = \s+postfix\/\S+(?:\[\d+\])*\:
DEST_KEY = MetaData:Sourcetype
FORMAT = sourcetype::opnsense:postfix

#Filterlog sourcetyper (consider move to TA-netfilter + tweaks)
[opnsense_filterlog_sourcetyper]
REGEX = (?:\sfilterlog\:\s+(?:(?:.*?\,){6}(?:\S+).*?\,))
DEST_KEY = MetaData:Sourcetype
FORMAT = sourcetype::opnsense:filterlog

#Squid Sourcetyper (consider mover to TA-Squid)
[opnsense_set_squid_sourcetype]
DEST_KEY = MetaData:Sourcetype
REGEX = \(squid\-\d+\)\:
FORMAT = sourcetype::squid:access

## End Index Time Transforms ##

### Reports  - Search Time Field Extractions, supports MK Value ###

##modified from original report in Splunk_TA_nix/default/transforms.conf
[ssh-login-events]
REGEX = sshd(?:\[\d+\])?\: (.*?) ((?:keyboard-interactive\/pam\s+|\'\\.*?\'\s+))?(?:(?:\, client not responding|by (authenticating user) |for |from user )(\S+)(?:\s*from)?|by|from|for)\s+(\S+)\s+port\s+(\d+)?(?:$|\s+|\:\s+)?(?:(ssh2)|(.*))?
FORMAT = vendor_action::$1 signature::$2 temp_signature::$3 user::$4 src_ip::$5 src_port::$6 sshd_protocol::$7 reason::$8

### Postfix transforms from https://github.com/Kintyre/TA-postfix/blob/master/default/transforms.conf ###
[postfix_angle_brackets]
# Strip out the  '<' or '>' from the value of the postfix log messages.  
# Examples:
#   to=<jdoe@aol.com>
#   from=<bob@example.com>
#   message-id=<20360611180017.4944318FE39@webapp.example.com>
#   helo=<localhost.localdomain>
REGEX   = [ ](to|from|message-id|helo)=<([^<> ]+)>
FORMAT  = $1::$2

[postfix_subject]
# Logging the subject header requires changes to postfix config (disabled by default)
#   main.cf:  header_checks = regexp:/etc/postfix/header_checks
#   header_checks:  /^subject:/ WARN
# Example event:
#   Nov 4 10:57:01 localhost postfix/cleanup[22492]: 2290326720: warning: header subject: test email from localhost[127.0.0.1]; from= to= proto=SMTP helo=
REGEX = header [Ss]ubject: (?<subject>.+?) from [^;]+;
## End Postfix transforms ###

## Lighttpd ## 
[REPORT-opnsense_lighttpd_access_combined]
REGEX = lighttpd.*\s+(\S+)\s+(\S+)\s+(\S)\s\[([^\]]+)\]\s+\"(GET|PUT|\S+)\s+(\S+)\s+([^\"]+)\"\s+(\d+)\s+(\d+)\s+\"([^\"]+)\"\s+\"([^\"]+)\"
FORMAT = src:$1 dest::$2 user::$3 req_time::$4 http_method::$5 uri_path::$6 http_content_type::$7 status::$8 bytes::$9 http_referrer::$10 http_user_agent::$11

[REPORT-opnsense_lighttpd_user_agent_parser]
REGEX = lighttpd.*\s+\S+\s+\S+\s+\S\s\[[^\]]+\]\s+\"\S+\s+\S+\s+[^\"]+\"\s+\d+\s+\d+\s+\"[^\"]+\"\s+(?:\"|\s+)(\S+)\/([\d\.]+)(?:\s\(([^\)]+)\)\"\s+)*
FORMAT = ua_product::$1 ua_product_version::$2 ua_product_details::$3
REPEAT_MATCH = true

## End Lighttpd ##

##Useful for squid?
#[proxy_url_parser]
#SOURCE_KEY = url
#REGEX = ^(?:\w+\:\/\/)*([^\|\/$\s]*)(?:([^\?$\s]+)(\?[^$\s]+)?)
#FORMAT = site::$1 uri_path::$2 port::$3

[opnsense_vendor_tcp_flag]
CLEAN_KEYS = 0
FORMAT = vendor_tcp_flag::$1
MV_ADD = 1
REGEX = (\w)
SOURCE_KEY = vendor_tcp_flags

## Unbound DNS ##
[REPORT-unbound_sections]
REGEX = (\S+ SECTION): (.*?)(?:\s*;;|$)
FORMAT = $1::$2
REPEAT_MATCH = true
CLEAN_KEYS = true
KEEP_EMPTY_VALS = true

[REPORT-unbound_q_section]
REGEX = (\S+)\s+(IN)\s+(Query|IQuery|Status|Notify|Update|A|MX|NS|PTR|AAAA|DS|DNSKEY|NULL|TXT|SRV|ANY)\s+\;\;
FORMAT = query::$1 zone::$2 query_type::$3
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_a_section0]
REGEX = (\S+)\s+(\d+)\s+(IN)\s+(A|AAAA|DNAME|MX|NS|PTR|CNAME)\s+(\S+?)\s+
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4 answer::$5
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_a_section1]
REGEX = (\S+)\s+(\S+)\s+(IN)\s+(DNSKEY)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s*(?:\;\{id\s+\=\s+(\d+)\s+\((\S+)\)\,\s+size\s+\=\s+(\S+)\})?
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4 bytes_in::$5 dnskey_field6::$6 dnskey_field7::$7 pubkey::$8 pubkey_id::$9 pubkey_type::$10 pubkey_size::$11
REPEAT_MATCH = true
MV_ADD = true

##DS
[REPORT-unbound_a_section2]
REGEX = (\S+)\s+(\d+)\s+(IN)\s+(DS)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4 dnskey_tag::$5  dnskey_algorithm::$6  dnskey_digest::$7  a2field8::$8  a2field9::$9
REPEAT_MATCH = true
MV_ADD = true

##RRSIG DS
[REPORT-unbound_a_section3]
REGEX = (\S+)\s+(\d+)\s+(IN)\s+(\w+(?:\s+\w+)?)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4  a3field5::$5  a3field6::$6  a3field7::$7  end::$8  start::$9 auth_id::$10
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_a_section4]
REGEX = (\S+)\s+(\d+)\s+(IN)\s+(TXT)\s+\"(.*?)\"
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4 answer::$5
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_au_section0]
REGEX = \s+(\S+)\s+(\d+)\s+(IN)\s+(\w+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(.*?)\s\;(?:\{flags\: ([^\}]+)\})
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4 au0field5::$5  au0field6::$6  au0field7::$7  au0field8::$8  au0field9::$9  auth_request::$10 auth_flags::11 
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_au_section1]
REGEX = \s+(\S+)\s+(\d+)\s+(IN)\s+([^\.]+?)\s+(\d+)\s(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4 au1field5::$5  au1field6::$6  au1field7::$7  end::$8  start::$9  auth_id::$10
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_au_section2]
REGEX = \s+(\S+)\s+(\S+\=)\s+\;\{id\s+\=\s+(\d+)\}
FORMAT = name::$1 nsec_sig::$2 nsec_id::$3
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_au_section3]
REGEX = \s+(\S+)\s+(\d+)\s+(IN)\s+(SOA)\s+(\S+?)\.?\s(\S+?)\.?\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)
FORMAT = name::$1 ttl::$2 zone::$3 record_type::$4  mname::$5 rname::$6 serial::$7 refresh::$8 retry::$9 expire::$10 minimum::$11
REPEAT_MATCH = true
MV_ADD = true

[REPORT-unbound_au_section4]
REGEX = \s+(\S+)\s+(\S+)(?:(?:$|.*;; ADDITIONAL SECTION:))
FORMAT = name::$1 soa_sig::$2
REPEAT_MATCH = true
MV_ADD = true

## End Unbound DNS ##

###Need to modify the names so they don't conflict with TA-Nix
## DHCP ##
[dvc_for_dhcpd]
REGEX = via\s+(.*)
FORMAT = dvc::$1

[signature_for_dhcpd]
REGEX = dhcpd\:\s+(DHCP\w+)
FORMAT = signature::$1

##New
[signature_for_leases]
REGEX = dhcpd\:\s+Wrote (\d+) (.*) to leases file
FORMAT = signature::"wrote to leases file" $2::$1

##added dvc_interface
[dest_kv_for_dhcpd_ack]
REGEX = DHCPACK\s+on\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*(?:\((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\))?\s*to\s+((?:[a-fA-F0-9]{2}.?){6})\s+(?:\(([^\)]+)\)\s)?(?:via (\S+))?
FORMAT = dest_ip::$1 dest_translated_ip::$2 dest_mac::$3 dest_nt_host::$4 dvc_interface::$5

#
#[dest_kv_for_dhcpd_ack2]
#REGEX = DHCPACK\s+to\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*(?:\(((?:[a-fA-F0-9]{2}.?){6})\))?
#FORMAT = dest_ip::$1 dest_mac::$2

#added dvc_interface
#[dest_kv_for_dhcpd_discover]
#REGEX = DHCPDISCOVER\s+from\s+((?:[a-fA-F0-9]{2}.?){6})\s+(?:\(([^\)]+)\)\s)?(?:via (\S+))?
#FORMAT = dest_mac::$1 dest_nt_host::$2 dvc_interface::$3

#[dest_kv_for_dhcpd_inform]
#REGEX = DHCPINFORM\s+from\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
#FORMAT = dest_ip::$1

#[dest_kv_for_dhcpd_nak]
#REGEX = DHCPNAK\s+on\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*(?:\((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\))?\s*to\s+((?:[a-fA-F0-9]{2}.?){6})\s*(?:\(([^\)]+)\))?
#FORMAT = dest_ip::$1 dest_translated_ip::$2 dest_mac::$3 dest_nt_host::$4

#added dvc_interface
[dest_kv_for_dhcpd_offer]
REGEX = DHCPOFFER\s+on\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*(?:\((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\))?\s*to\s+((?:[a-fA-F0-9]{2}.?){6})\s+(?:\(([^\)]+)\)\s)?(?:via (\S+))?
FORMAT = dest_ip::$1 dest_translated_ip::$2 dest_mac::$3 dest_nt_host::$4 dvc_interface::$5

##added dvc_interface
#validate ?dest_translated_ip?
[dest_kv_for_dhcpd_request]
REGEX = DHCPREQUEST\s+for\s+(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*(?:\((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\))?\s*from\s+((?:[a-fA-F0-9]{2}.?){6})\s+(?:\(([^\)]+)\)\s)?(?:via (\S+))?
FORMAT = dest_ip::$1 dest_translated_ip::$2 dest_mac::$3 dest_nt_host::$4 dvc_interface::$5

## END DHCP ##

### END Reports/Search Transforms ##
