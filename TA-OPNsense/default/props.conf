[opnsense]
TRUNCATE = 25990
TRANSFORMS-opnsense_sourcetyper = opnsense_sourcetyper, opnsense_filterlog_sourcetyper, opnsense_postfix_sourcetyper, opnsense_set_squid_sourcetype, opnsense_set_dhcpd_sourcetype

SHOULD_LINEMERGE = false
SEDCMD-event_cleaner = s/^(\w{3}\s+\d{1,2}\s\d{2}:\d{2}:\d{2}\s)+\S+\.\S+\s+/\1/g
SEDCMD-event_cleaner2 = s/^(\w{3}\s+\d{1,2}\s\d{2}:\d{2}:\d{2}\s)+(\w{3}\s+\d{1,2}\s\d{2}:\d{2}:\d{2}\s)+/\1/g

EXTRACT-component,msg = \s+?(?P<component>[^\[\:\s]+?)(?:\[\d+\])?\:\s+(?P<msg>.*)

#script rule-updater.py
EXTRACT-rule_updater = (?P<script>rule\-updater[^\:\[]+)\:\s+(?P<vendor_status>.*) for (?P<url>.*)
EXTRACT-configd = (?P<script>configd\.py)\:\s\[(?P<script_id>[^\]]+)\]\s(?P<signature>.*)

#configd.py
EXTRACT-configd0 = configd.*\:\s+\[(?P<configd_id>[0-9a-f\-]+)\]\s+(?<configd_msg>.*)
EXTRACT-configd1 = configd.*?\:\s+(?P<configd_msg>[^\[].*)

#flow_aggregate.py
EXTRACT-vendor_action,file = flowd.*?\:\s+(?<vendor_action>vacuum done|vacuum)?(?:$|\s(?P<file>.*?\.sqlite)?)?


[opnsense:cron]
EXTRACT-cron = cron.*\:\s+\((?<user>[^\)]+)\)\s+(?<command>\S+)\s+\((?<command_params>.*)\)

[opnsense:dhclient]
#DISCOVER = IP, REQUEST = MAC
EXTRACT-discover,request = (?P<vendor_action>DHCPDISCOVER|DHCPREQUEST) on (?P<interface>\S+) to (?P<dest_ip>\S+) port (?P<dest_port>\d+)
#OFFER = IP, ACK = MAC
EXTRACT-ack,offer = (?P<vendor_action>DHCPACK|DHCPOFFER) from (?P<dhcp_server_ip>\S+)
EXTRACT-ifconfig = dhclient: ifconfig (?<interface>\S+) (?P<zone>\S+) (?P<ip>\S+) netmask (?P<netmask>\S+) broadcast (?P<broadcast>\S+)
#event type for new ip?
EXTRACT-new_ip = dhclient: New IP Address \((?P<interface>\S+)\): (?P<ip_address>\S+)
EXTRACT-new_subnet_mask = dhclient: New Subnet Mask \((?P<interface>\S+)\): (?P<subnet_mask>\S+)
EXTRACT-new_broadcast_address = dhclient: New Broadcast Address \((?P<interface>\S+)\): (?P<broadcast_address>\S+)
EXTRACT-new_routers = dhclient: New Routers \((?P<interface>\S+)\): (?P<default_gw>\S+)
EXTRACT-status = dhclient: (?P<status>ARPSEND|ARPCHECK|BOUND)
EXTRACT-dest_ip = dhclient(?:\[\d+\])*: bound to (?<dest_ip>\S+)\s+\S+\s+renewal in (?<renew>\d+) seconds

[opnsense:devd]
KV_MODE = auto
EXTRACT-vendor_action,vendor_msg = devd\:\s+(?<vendor_action>.*?)(?:$|\s\'(?<vendor_msg>.*)\s*\')

[opnsense:dhcpd]
SHOULD_LINEMERGE = false
EXTRACT-ipv6_dhcp_rebind = dhcpd: Rebind message from (?<src_mac>\S+) port (?<src_port>\d+), transaction ID (?<transaction_id>\S+)
EXTRACT-ipv6_dhcp_reply = dhcpd: Sending Reply to (?<src_mac>\S+) port (?<src_port>\S+)
#EXTRACT-ipv4_dhcp = (?<vendor_action>DHCPACK|DHCPREQUEST) (?:on|for) (?<dest_ip>\S+) (?:from|to) (?<src_mac>\S+) \(.*\) via (?<src_interface>\S+)
#EXTRACT-dhcpd_vendor_action = (?P<vendor_action>DHCPACK|DHCPREQUEST|DHCPOFFER|DHCPDISCOVER)
#EXTRACT-ipv4_dest_ip = (?:on|for) (?<dest_ip>\S+)
#EXTRACT-ipv4_dest_mac = (?:from|to) (?<dest_mac>[0-9a-zA-z\:]+)\s
#EXTRACT-ipv4_interface = via (?<interface>\S+)
#EXTRACT-ipv4_dest_nt_host = (?:to|for|from).+\((?P<dest_nt_host>\S+)\)

REPORT-0dest_x_for_dhcpd = dest_kv_for_dhcpd_ack, dest_kv_for_dhcpd_ack2, dest_kv_for_dhcpd_discover, dest_kv_for_dhcpd_inform, dest_kv_for_dhcpd_nak, dest_kv_for_dhcpd_offer, dest_kv_for_dhcpd_request
REPORT-dest_for_dhcpd = dest_nt_host_as_dest,dest_mac_as_dest,dest_ip_as_dest
REPORT-dvc_for_dhcpd = dvc_for_dhcpd
REPORT-signature_for_dhcpd = signature_for_dhcpd,signature_for_leases

FIELDALIAS-dest_dns = host AS dest_dns
EVAL-vendor = "OPNsense"
EVAL-product = "dhcpd
EVAL-vendor_product = "OPNsense:dhcpd"
EVAL-action = case(signature=="DHCPACK","added",signature=="DHCPNAK","blocked")

[opnsense:filterlog]
#Step 1 Transform Regex Extraction
REPORT-vendor_tcp_flag = opnsense_vendor_tcp_flag

#Step 2 Props Extraction
EXTRACT-ipv4_tcp = filterlog:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>tcp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*),(?<vendor_tcp_flags>[^,]*),(?<sequence_number>[^,]*),(?<ack>[^,]*),(?<window>[^,]*),(?<urg>[^,]*),(?<options>[^$]*)$
EXTRACT-ipv4_udp = filterlog:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>udp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*)
EXTRACT-ipv4_icmp_request = filterlog:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>icmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<icmp_code>request),(?<echo_id>\d+),(?<echo_sequence>\d+)
EXTRACT-ipv4_icmp_datalength = filterlog:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>icmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),datalength=(?<datalength>\d+)
EXTRACT-ipv4_icmp_unreachport = filterlog:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>icmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<icmp_code>unreachport),(?<icmp_dest_ip>[^,]*),(?<unreachable_protocol_id>[^,]*),(?<unreachable_port_data>[^$]+)$
EXTRACT-ipv4_redirect_icmp_unreach_timeexceed = filterlog:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>icmp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<icmp_code>redirect|unreach|timexceed),(?<icmp_text>[^$]+)$
EXTRACT-ipv4_carp = filterlog:\s(?<rule>[^,])*,(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>4),(?<tos>[^,]*),(?<ecn>[^,]*),(?<ttl>[^,]*),(?<id>[^,]*),(?<offset>[^,]*),(?<flags>[^,]*),(?<transport_id>[^,]*),(?<vendor_transport>carp),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<carp_type>[^,]*),(?<carp_ttl>[^,]*),(?<vhid>[^,]*),(?<version>[^,]*),(?<advbase>[^,]*),(?<advskew>[^,]*)
EXTRACT-ipv6_icmp = filterlog:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),(?<vendor_transport>ICMPv6),(?<transport_id>[^,]*),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),
EXTRACT-ipv6_tcp = filterlog:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),(?<vendor_transport>TCP),(?<transport_id>[^,]*),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*),(?<vendor_tcp_flags>[^,]*),(?<sequence_number>[^,]*),(?<ack>[^,]*),(?<window>[^,]*),(?<urg>[^,]*),(?<options>[^$]*)$
EXTRACT-ipv6_udp = filterlog:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),(?<vendor_transport>UDP),(?<transport_id>[^,]*),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<payload_bytes>[^,]*)
EXTRACT-ipv6_icmp_options = filterlog:\s(?<rule>[^,]*),(?<sub_rule>[^,]*),(?<anchor>[^,]*),(?<tracker_id>[^,]*),(?<dest_int>[^,]*),(?<reason>[^,]*),(?<vendor_action>[^,]*),(?<vendor_direction>[^,]*),(?<ip_version>6),(?<class>[^,]*),(?<flow_label>[^,]*),(?<hop_limit>[^,]*),(?<vendor_field0>Options),(?<transport_id>[^,]*),(?<bytes>[^,]*),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<vendor_field1>[^,]+),(?<urg>[^,]+),(?<window>[^,]+),(?<vendor_field4>[^,]+),

#Step 3 Lookup
LOOKUP-filterlog_tcpflag = opnsense_filter_tcpflags vendor_tcp_flag OUTPUTNEW tcp_flag
LOOKUP-filterlog_transport = opnsense_filter_transport vendor_transport OUTPUTNEW transport
LOOKUP-filterlog_action = opnsense_filter_action vendor_action OUTPUTNEW action

#Step 4 Eval
EVAL-bytes_in = if(vendor_direction == "in", bytes,null)
EVAL-bytes_out = if(vendor_direction == "out", bytes,null)
EVAL-bytes = bytes_in+bytes_out
EVAL-direction = case(vendor_direction == "in", "inbound", vendor_direction == "out", "outbound")
EVAL-dvc = case(isnull(dvc),host)
EVAL-ipv6_autoconfig = case(cidrmatch("fe80::/10",src_ip),"true")
EVAL-vendor = OPNsense
EVAL-product = filterlog
EVAL-vendor_product = "OPNsense:filterlog"

#Step 5 Alias
FIELDALIAS-opnsense_filterlog_src = src_ip AS src
FIELDALIAS-opnsense_filterlog_dest = dest_ip AS dest
FIELDALIAS-opnsense_filterlog_dest_interface = dest_int AS dest_interface
FIELDALIAS-opnsense_filterlog_dvc = host AS dvc

#Convert to access_combined ? Would still need additional CIM app
[opnsense:lighttpd]
KV_MODE = none
REPORT-lighttpd_access_combined = REPORT-opnsense_lighttpd_access_combined, REPORT-opnsense_lighttpd_user_agent_parser
EVAL-app = lighttpd
EVAL-site = coalesce(site,case(dest!="-",dest),host)
EVAL-url = 'site'+'uri_path'

[opnsense:pkg]
##the system that was affected by the patch/update
FIELDALIAS-dest = host AS dest
##the device that detected the patch
FIELDALIAS-dvc = host AS dvc
EVAL-file_name = pkg+"-"+pkg_version
EVAL-vendor_product = "Default pkg manager"

[opnsense:opnsense]
EVAL-action = if(isnull(action),case(vendor_action=="Successful login","success",vendor_action=="Web GUI authentication error","failure"),action)
EXTRACT-component,msg = opnsense.?\:\s+(?P<component>\S+)\:\s+(?P<msg>.*)
EXTRACT-subcomponent = opnsense.?\:\s+\S+\:\s+(?P<subcomponent>\S+)\:\s+(?P<subcomponent_msg>.*)
EXTRACT-index-php-login = opnsense\:\s+\/index\.php\:\s(?P<vendor_action>.*?)\s+for (?:user )?\'(?P<user>[^\']+)\' from(?:\:)?\s+(?P<src>.*)

EXTRACT-geteway_ip = opnsense:.+default route to (?P<gateway_ip>\S+)
EXTRACT-ip_address,interface,real_interface = opnsense: .+wanip:.+ \(IP address: (?P<ip_address>\S+)\) \(interface: (?P<interface>\S+)\) \(real interface\: (?P<real_interface>\S+)\)
EXTRACT-dyn_dns = Dynamic DNS(?:\s+\((?P<dyn_dns_name>[^\)]+)\))*\:\s+(?:\((?<status>[^\)]+)\)\s+)*(?P<msg>(?:IP address updated successfully \((?P<dyn_ip_addr>[^\)]+)\))|updating cache file (?P<cache_file>[^\:]+)\:\s+(?P<dyn_ip_addr1>\S+)|(?P<dyn_ip_addr2>\S+)\s+extracted|Current Service\:\s+(?P<dyn_dns_service>\S+)|.*\s+starting\.*|running.*for (?P<dyn_interface0>\S+)\.* found (?P<dyn_interface1>\S+))

[opnsense:openvpn]
EXTRACT-process_id = \w{3}\s+\d{1,2}\s\d{2}:\d{2}:\d{2}\s+\w+(\[(?<process_id>\d+)\])?:
EXTRACT-authentication = openvpn: user '(?<user>[^']+)' (?<vendor_action>could not authenticate\.|authenticated)
EXTRACT-user,src_ip,src_port = openvpn\[\d+\]: (?<user>\S+)\/(?<src_ip>\S+):(?<src_port>\d+)
EXTRACT-src_ip,src_port = openvpn\[\d+\]:\s+(?<src_ip>\d+\.\d+\.\d+\.\d+):(?<src_port>\d+)
EXTRACT-user,reason = openvpn\[\S+\]:.*\[(?<user>\S+)\]\s+(?<reason>Peer Connection Initiated|Inactivity timeout)
EXTRACT-vpn_ipv4,vpn_ipv6 = ^[^=\n]*=(?P<vpn_ipv4>[^,]+)[^=\n]*=(?P<vpn_ipv6>.+)

EVAL-app = "opnsense:openvpn"

LOOKUP-openvpn_action = opnsense_openvpn_action vendor_action OUTPUTNEW action

[opnsense:nginx]
EXTRACT-pf_nginx = nginx: (?P<dest>[^ ]+) \-(?P<user>[^\s"]*) \- \[(?P<request_time>[^\]]+)[^"\n]*"(?P<http_method>\w+)\s+(?P<url>[^\s"]+)[^ \n]* (?P<http_proto>[^"]+)[^ \n]* (?P<status>[^ ]+)\s+(?P<bytes_out>\d+)[^"\n]*"(?P<http_referrer>[^"]+)(?:[^"\n]*"){2}(?P<http_user_agent>[^"]+)
EVAL-app = "opnsense:nginx"

[opnsense:postfix]
##From https://github.com/Kintyre/TA-postfix/blob/master/default/props.conf
# Extract the subject if enabled in Postfix's configuration
REPORT-subject = postfix_subject
# Extract to/from/message-id/helo (without the '<>'s)
REPORT-angle_brackets = postfix_angle_brackets

EXTRACT-vendor_action,dest,dest_ip,dest_port,vendor_reason = (?P<vendor_action>\S+)\s+to\s+(?P<dest>[^\[]+)\[(?P<dest_ip>[^\]]+)\]\:(?P<dest_port>\d+)\:\s+(?P<vendor_reason>.*)
EXTRACT-queue_id = postfix/\w+\[\d+\]:\s+(?<queue_id>[A-Fa-f0-9]{6,20}):
EXTRACT-bounce = postfix/bounce\[\d+\]: [a-fA-F0-9]{6,20}: (?<bounce_reason>[^:]+): (?<bounce_queue_id>[a-fA-F0-9]{6,20})$
EXTRACT-status_reject = postfix/smtpd\[\d+\]: (?:NOQUEUE|[A-Fa-f0-9]{6,20}): (?<status>reject):
EXTRACT-reason = status=[^\s]+\s+\((?<reason>.*)\)$
EXTRACT-reject_reason = : (?<reject_reason>[^;:]+);
EXTRACT-dest = relay=(?<dest_host>[^\[ ,]+)\[(?<dest_ip>[^: \]]+)\](?::(?<dest_port>\d+))?
EXTRACT-remote_queue = queued as (?<xref>[A-Fa-f0-9]+) in reason
EXTRACT-status_code = status=\w+ \((?:host \S+ said:\s*)?(?<status_code_short>\d+)
EXTRACT-src-connect = (?:dis)?connect(?:ion after (?:HELO|CONNECT))? from (?:(?<src_host>[^\[]+)\[(?<src_ip>[\d.]+)|(?<src>.*))
# Extration of the different delays (cf. http://logreporters.sourceforge.net/faq.html#percentiles)
EXTRACT-delays = ^(?<time_before_queue>[^/]+)/(?<time_in_queue>[^/]+)/(?<time_connecting>[^/]+)/(?<time_transmitting>[^$]+)$ in delays

# Rename fields for CIM compliance with the Email data model
FIELDALIAS-status_code = dsn as status_code
#FIELDALIAS-status_code = status_code_short as status_code
FIELDALIAS-protocol = proto as protocol
FIELDALIAS-filter_action = reject_reason as filter_action
FIELDALIAS-internal_message_id = queue_id AS internal_message_id
FIELDALIAS-process_id = pid AS process_id
FIELDALIAS-src_user = from as src_user
FIELDALIAS-recipient = to as recipient
FIELDALIAS-orig_recipient = orig_to as orig_recipient
FIELDALIAS-recipient_count = nrcpt as recipient_count

# Don't extract 'src_host' if "unknown" (typical with reverse DNS disabled)
EVAL-src = coalesce(src, nullif(src_host, "unknown"), src_ip)
# FIELDALIAS-src = src_host AS src, src_ip AS src
EVAL-dest = coalesce(dest, nullif(dest_host, "unknown"), dest_ip)

LOOKUP-consts = postfix_consts sourcetype OUTPUT protocol, vendor, product
LOOKUP-actions = postfix_actions status OUTPUT action

# Email CIM requires the delay field to be in milliseconds
EVAL-delay = delay*1000

[opnsense:rule-updater]
EXTRACT-download_status = \srule-updater\.\w+(?:\[\d+\])*\:\s+download (?<download_status>\S+)

[opnsense:sshd]
### Event extractions by type
EXTRACT-protocol_error = sshd(?:\[\d+\])?\: (.*?)\:\s+type (?P<protocol_error>(?P<protocol_error_type>\d+) seq (?P<protocol_error_seq>\d+))\s+(?<reason>.*)
REPORT-0authentication_for_opnsense_sshd = ssh-login-events, ssh-session-close, ssh-disconnect, sshd_authentication_kerberos_success, sshd_authentication_refused, sshd_authentication_tried, sshd_login_restricted, pam_unix_authentication_success, pam_unix_authentication_failure, sudo_cannot_identify, ksu_authentication, ksu_authorization, su_simple, su_authentication, su_successful, wksh_authentication, login_authentication

EVAL-signature = coalesce(signature,temp_signature,reason,vendor_action)
EVAL-action = if(app="su" AND isnull(action),"success",action)
REPORT-dest_for_opnsense_sshd = host_as_dest
LOOKUP-action_for_opnsense_sshd = nix_action_lookup vendor_action OUTPUTNEW action
REPORT-pid-process_for_opnsense_sshd = syslog-extractions
REPORT-src_for_opnsense_sshd = src_dns_as_src, src_ip_as_src, host_as_src
### This is for Suricata eve.fast log file
## but should not interfere with eve.json parsing

[opnsense:suricata]
EVAL-action = case(vendor_action="Drop","blocked",vendor_action!="Drop",action)

EXTRACT-id,nt_host,name,classification,priority,protocol = \[\d+:(?P<id>\d+):\d+\] (?P<nt_host>\S+) (?P<name>.*?)\s\[Classification: (?P<classification>[^\]]+)\] \[Priority\: (?P<priority>\d+)\] \{(?P<protocol>\S+)\}
EXTRACT-vendor_action = \]: \[(?P<vendor_action>[^\]]+)\] \[[\d\:]+\]
EXTRACT-src_ip,src_port,dest_ip,dest_port = (?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:(?P<src_port>\d+) \-\> (?P<dest_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\:(?P<dest_port>\d+)
EXTRACT-src_ipv6,src_port,dest_ipv6,dest_port = (?P<src_ip>[\da-f\:]+)\:(?P<src_port>\d+) \-\> (?P<dest_ip>[\da-f\:]+)\:(?P<dest_port>\d+)

EVAL-dest = dest_ip
EVAL-severity = case(severity>3,"critical",severity=="3","high",severity=="2","medium",severity=="1","low",severity=="0","informational")
EVAL-category = classification
EVAL-vendor_product = "Suricata"
EVAL-signature = name

##errors
EXTRACT-level,log_message = \[\d+\] \<(?P<level>\w+)\> -- (?P<log_message>.+)
EXTRACT-errcode = ERRCODE: (?P<errcode>[^\]]+)
EXTRACT-url = url=(?P<url>[^\|]+)
EXTRACT-content = content:"(?P<content>[^\"]+)
EXTRACT-metadata = metadata:(?P<metadata>[^\;]+)
EXTRACT-classtype = classtype:(?P<classtype>[^\;]+)
EXTRACT-sid = sid:(?P<sid>[^\;]+)
EXTRACT-msg = msg:"(?P<sid>[^"]+)";

[opnsense:syslogd]
EXTRACT-service_exec,status,signature = (?<service_exec>syslogd)\:\s+(?:(?<status>.*start.*|.*stop.*|.*disable.*)|(?<signature>sendto\: .*))
EVAL-dest = host

[opnsense:unbound]
KV_MODE = none

#REPORT-unbound_sections = REPORT-unbound_sections
REPORT-unbound_q_section = REPORT-unbound_q_section
REPORT-unbound_a_section0 = REPORT-unbound_a_section0
REPORT-unbound_a_section1 = REPORT-unbound_a_section1
REPORT-unbound_a_section2 = REPORT-unbound_a_section2
REPORT-unbound_a_section3 = REPORT-unbound_a_section3
REPORT-unbound_a_section4 = REPORT-unbound_a_section4
REPORT-unbound_au_section0 = REPORT-unbound_au_section0
REPORT-unbound_au_section1 = REPORT-unbound_au_section1
REPORT-unbound_au_section2 = REPORT-unbound_au_section2
REPORT-unbound_au_section3 = REPORT-unbound_au_section3
##has issues
#REPORT-unbound_au_section4 = REPORT-unbound_au_section4

EXTRACT-queries = info: resolving (?P<query>\S{2,})\s(?P<query_type>\S+)
EXTRACT-response = info: response for (?P<answer>\S+)\s(?P<record_type>\S+)
EXTRACT-reply = info: reply from\s(\S+)\s(?P<src>(\d|.)+)#(?P<src_port>(\d+))
EXTRACT-ip_version,src_ip,src_port,bytes_in = debug\:.*\s+(?<ip_version>ip\S+)\s+(?<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+port (?<src_port>\d+)\s\(len\s(?<bytes_in>\d+)\)
#external lookup response
EXTRACT-src_host,src_ip,src_port = info\:\s+reply from \<(?<src_host>[^\>]+)\>\s+(?<src_ip>[^\#]+)\#(?<src_port>\d+)
#external lookup request
EXTRACT-dest_host,dest_ip,dest_port = debug\:.*\s+\<(?<dest_host>[^\>]+)\>\s+(?<dest_ip>[^\#]+)\#(?<dest_port>\d+)

##Unbound External Lookup Server
EXTRACT-dest_host,query,dest,dest_port = try (?<dest_host>\S+)\s+\<(?<query>[^\>]+)\>\s+(?<dest>[^\#]+)\#(?<dest_port>\d+)
##Unbound local lookup
EXTRACT-zone,type,src_ip,src_port,query,query_type = (?<zone>\S+) (?<type>transparent|static) (?<src_ip>[^\@]+)\@(?<src_port>\d+)\s+(?<query>\S+)\s+(?<query_type>\S+)\s+IN$

EXTRACT-pid,log_level,message = unbound\: \[(?P<pid>[^\]]+)\]\s+(?P<log_level>\w+)\: (?P<message>.*)$
EXTRACT-lower_secs,upper_secs,recursion = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s+(?P<lower_secs>\d+\.*\d*)\s+(?P<upper_secs>\d+\.*\d*)\s+(?P<recursions>\d+)$
EXTRACT-cache_mem = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s+cache memory msg\=(?P<cache_mem_msg>\d+) rrset\=(?P<cache_mem_rrset>\d+) infra\=(?P<cache_mem_infra>\d+) val\=(?P<cache_mem_val>\d+)
EXTRACT-reply_addr = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s+Incoming reply addr \= (?P<ip_version>[^\s]+) (?P<reply_addr>[^\s]+) port (?P<reply_port>\d+)

EXTRACT-subcomponent = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?P<sub_process>[^\:]+)\: (?P<sub_process_msg>.+)

##Make these specific subcomponent extractions?##
EXTRACT-delegation_point = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:DelegationPoint\<\.\>)\: (?P<delegation_point_names>\d) names \((?P<delegation_point_names_missing>\d+) missing\)\, (?P<delegation_point_addrs>\d+) addrs \((?P<delegation_point_addrs_result>\d+) result\, (?P<delegation_point_addrs_avail>\d+) avail\) (?P<delegation_point>.*)
EXTRACT-mesh_run = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:mesh_run)\: end (?P<meshrun_end>\d+) recursion states \((?P<meshrun_rec_states_with_reply>\d+) with reply\, (?P<meshrun_rec_states_detached>\d+) detached\)\, (?P<meshrun_waiting_replies>\d+) waiting replies\, (?P<meshrun_rec_replies_sent>\d+) recursion replies sent\, (?P<mesh_run_replies_dropped>\d+) replies dropped\, (?P<meshrun_states_jostled_out>\d+)
EXTRACT-validator = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:validator)\: (?:(?:FindKey (?P<findkey>[^\s]+))|(?:chased to (?P<chased_to>[^\s]+))) (?P<query_type>[^\s]+)
#EXTRACT-validator_operate = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:validator operate)\: (?:query|chased to) (?P<query>[^\s]+) (?P<query_type>[^\s]+)
#EXTRACT-sending_query = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:sending query)\: (?P<name>[^\s]+) (?P<query_type>[^\s]+)
EXTRACT-sanitize = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:sanitize.*)\: (?P<sanitize_msg>.*?)\: (?P<query>[^\s]+) (?P<query_type>[^\s]+)
EXTRACT-nsec3 = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:nsec3)\: keysize (?P<keysize>\d+ bits)\, max iterations (?P<max_iterations>\d+)
#EXTRACT-processQueryTargets0 = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:processQueryTargets)\: (?P<name>[^\s]+) (?P<query_type>[^\s]+) \w+$
EXTRACT-processQueryTargets1 = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:processQueryTargets)\: targetqueries (?P<target_queries>\d+)\, currentqueries (?P<currentqueries>\d+) sentcount (?P<sentcount>\d+)
EXTRACT-sending_to_target = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:sending to target)\: \<(?P<target>.*?)\> (?P<dest_ip>[^\#]+)\#(?P<dest_port>\d+)
EXTRACT-iterator_operate = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:iterator operate)\: (?:(?:query (?P<name>[^\s]+))|(?:chased to (?P<chased_to>[^\s]+))) (?P<query_type>[^\s]+)
EXTRACT-serviced_query = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:serviced query)\: (?P<serviced_query_status>.+) for (?P<ip_version>[^\s]+) (?P<dest_ip>[^\s]+) port (?P<dest_port>\d+) \(len (?P<len>\d+)\)
##

EXTRACT-serviced_query0 = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?:serviced query) (?P<protocol>[^\s]+) timeout\=(?P<timeout>.+)$
EXTRACT-protocol,ip_version,src_ip,src_port,len = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?P<protocol>[^\s]+).*from (?P<ip_version>[^\s]+) (?P<src_ip>[^\s]+) port (?P<src_port>\d+) \(len (?P<len>\d+)\)
EXTRACT-src_ip,query,record_type = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (?P<query>[^\s]+) (?P<query_type>[^\s]+) IN$
EXTRACT-dest_ip,name,record_type,zone,reply_code,response_time,reply_code_id = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s(?P<dest_ip>[^\s]+) (?P<name>[^\s]+) (?P<record_type>[^\s]+) (?<zone>IN) (?P<reply_code>[^\s]+) (?P<response_time>[^\s]+) (?P<reply_code_id>\d+) (?P<LASTFIELD>\d+)

EXTRACT-pct = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\s\[25\%\]\=(?P<pct_25>[^\s]+) median\[50\%\]\=(?P<pct_50>[^\s]+) \[75\%\]\=(?P<pct_75>[^\s]+)
EXTRACT-recursion_processing_time = unbound\: \[(?:[^\]]+)\]\s+(?:\w+)\:\saverage recursion processing time (?P<recursion_processing_time>.*)

EXTRACT-opcode = opcode\: (?P<opcode>[^\,]+)\, rcode\: (?P<reply_code>[^\,]+)\, id\: (?P<reply_code_id>\d+)

EXTRACT-flags = flags: (?<flags>.*?)\s\;
EXTRACT-counts = QUERY: (?<query_count>[^\,]+)\, ANSWER: (?<answer_count>[^\,]+)\, AUTHORITY: (?<authority_answer_count>[^\,]+)\, ADDITIONAL: (?<additional_answer_count>[^\s]+)
EXTRACT-rcvd = MSG SIZE\s+rcvd: (?<rcvd>\d+)


EVAL-app = "opnsense:unbound"
EVAL-vendor_product = "Unbound DNS"
EVAL-ip_version = case(cidrmatch("0.0.0.0/0",src_ip),"ipv4", isnotnull(ip_version),ip_version)
#Src
#EVAL-src = coalesce(src,src_ip,host)
EVAL-src = case(opcode=="QUERY",host, isnull(opcode),src_ip)
#Dest
#EVAL-dest = case(OPCODE=="QUERY",<last DNS server event dvc_ip>)
#split(case(1=1,"TEST1|Test2"),"|")
EVAL-message_type = case(opcode=="QUERY",split("Query|Response","|"), isnull(opcode) AND isnotnull(query),"Query")
EVAL-bytes_in = rcvd
EVAL-flags = split(flags," ")
EVAL-name = mvdedup(rtrim(coalesce(name,query),"."))
EVAL-ttl = mvdedup(coalesce(ttl,auth_ttl))
EVAL-query = rtrim(query,".")
EVAL-answer = mvdedup(rtrim(answer,"."))
EVAL-reply_code = case(upper(reply_code)=="SERVFAIL", "ServFail", upper(reply_code)=="NOERROR", "NoError", upper(reply_code)=="NXDOMAIN", "NXDomain", upper(reply_code)=="REFUSED", "Refused", upper(reply_code)=="NOTAUTH", "NotAuth", isnotnull(reply_code), reply_code)
EVAL-record_type = mvdedup(record_type)
EVAL-zone = mvdedup(zone)
